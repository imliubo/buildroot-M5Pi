diff --git a/esp_sip.c b/esp_sip.c
index 632db86..58844f0 100755
--- a/esp_sip.c
+++ b/esp_sip.c
@@ -47,6 +47,7 @@
 #endif /* USE_EXT_GPIO */
 
 extern struct completion *gl_bootup_cplx; 
+extern struct task_struct *sif_irq_thread;
 
 static int old_signal = -35;
 static int avg_signal = 0;
@@ -2205,8 +2206,12 @@ sip_poll_bootup_event(struct esp_sip *sip)
 
 	esp_dbg(ESP_DBG_TRACE, "******time remain****** = [%d]\n", ret);
 	if (ret <= 0) {
-		esp_dbg(ESP_DBG_ERROR, "bootup event timeout\n");
-		return -ETIMEDOUT;
+                esp_dbg(ESP_DBG_ERROR, "bootup event timeout\n");
+                //return -ETIMEDOUT;
+                sip->epub->wait_reset = 0;
+                wake_up_process(sif_irq_thread);
+                esp_dbg(ESP_DBG_ERROR, "for unknow reason,we may not be informed the boot/rst complete event, assume it completed and continue here\n");
+                msleep(50);
 	}	
 
 	if(sif_get_ate_config() == 0){
@@ -2240,7 +2245,11 @@ sip_poll_resetting_event(struct esp_sip *sip)
 	esp_dbg(ESP_DBG_TRACE, "******time remain****** = [%d]\n", ret);
 	if (ret <= 0) {
 		esp_dbg(ESP_DBG_ERROR, "resetting event timeout\n");
-		return -ETIMEDOUT;
+                //return -ETIMEDOUT;
+                sip->epub->wait_reset = 0;
+                wake_up_process(sif_irq_thread);
+                esp_dbg(ESP_DBG_ERROR, "for unknow reason,we may not be informed the boot/rst complete event, assume it completed and continue here\n");
+                msleep(50);
 	}	
       
         esp_dbg(ESP_DBG_TRACE, "target resetting %d %p\n", ret, gl_bootup_cplx);
diff --git a/spi_stub.c b/spi_stub.c
index d4ffd96..6d50533 100755
--- a/spi_stub.c
+++ b/spi_stub.c
@@ -3,9 +3,9 @@
 
 /* https://www.signal.com.tr/pdf/cat/8n-esp8266_spi_reference_en_v1.0.pdf */
 
-#define SPI_FREQ (10000000)
-//#define SPI_FREQ (20000000)                             //  1. 22.5Mhz     2. 45Mhz
-//#define SPI_FREQ (30000000)                             //  1. 22.5Mhz     2. 45Mhz
+// #define SPI_FREQ (10000000)
+// #define SPI_FREQ (20000000)                             //  1. 22.5Mhz     2. 45Mhz
+#define SPI_FREQ (30000000)                             //  1. 22.5Mhz     2. 45Mhz
 
 //Below are for spi HZ 22.5M
 #if (SPI_FREQ == 30000000)
@@ -94,7 +94,7 @@ struct spi_device_id esp_spi_id[] = {
 };
 MODULE_DEVICE_TABLE(spi, esp_spi_id);
 
-static int esp_cs0_pin = 16;
+static int esp_cs0_pin = 65;
 module_param(esp_cs0_pin, int, 0);
 MODULE_PARM_DESC(esp_cs0_pin, "SPI chip select zero");
 
@@ -109,9 +109,9 @@ static struct spi_board_info esp_board_spi_devices[] = {
   {
     .modalias = "ESP8089_0",
     .max_speed_hz = MAX_SPEED_HZ,
-    .bus_num = 1,
+    .bus_num = 0,
     .chip_select = 0,
-    .mode = 0,
+    .mode = SPI_MODE_3,
   },
 };
 
@@ -134,7 +134,7 @@ struct spi_device* sif_platform_new_device(void) {
 
 /* *** *** Interrupt *** *** */
 
-static int esp_interrupt = 26;
+static int esp_interrupt = 96;  // PD0
 module_param(esp_interrupt, int, 0);
 MODULE_PARM_DESC(esp_interrupt, "Interrupt pin");
 
@@ -214,7 +214,7 @@ SDIO:
   GPIO11  SDCMD
 */
 
-static int esp_reset_gpio = 13;
+static int esp_reset_gpio = 97;  // PD1
 module_param(esp_reset_gpio, int, 0);
 MODULE_PARM_DESC(esp_reset_gpio, "ESP8089 CHIP_EN GPIO number");
 
